AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for S3 buckets and Lambda function'

Resources:
  RawDataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: rawdata

  ImbaStanleyBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: imba-stanley

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${RawDataBucket}/*'
                  - !Sub 'arn:aws:s3:::${ImbaStanleyBucket}/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  CopyObjectFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CopyObjectFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import json

          s3 = boto3.client('s3')

          def handler(event, context):
              for record in event['Records']:
                  source_bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  target_bucket = 'imba-stanley'
                  
                  copy_source = {'Bucket': source_bucket, 'Key': key}
                  s3.copy_object(Bucket=target_bucket, Key=key, CopySource=copy_source)
                  
              return {
                  'statusCode': 200,
                  'body': json.dumps('Object copied successfully!')
              }

  S3BucketPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref CopyObjectFunction
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceArn: !GetAtt RawDataBucket.Arn

  NotificationConfigurationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutBucketNotification'
                Resource: !GetAtt RawDataBucket.Arn

  NotificationConfigurationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt NotificationConfigurationRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                  s3 = boto3.client('s3')
                  bucket = event['ResourceProperties']['BucketName']
                  function_arn = event['ResourceProperties']['FunctionArn']
                  
                  notification_configuration = {
                      'LambdaFunctionConfigurations': [
                          {
                              'LambdaFunctionArn': function_arn,
                              'Events': ['s3:ObjectCreated:*'],
                              'Filter': {
                                  'Key': {
                                      'FilterRules': [
                                          {
                                              'Name': 'prefix',
                                              'Value': 'data/'
                                          }
                                      ]
                                  }
                              }
                          }
                      ]
                  }
                  
                  try:
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket,
                          NotificationConfiguration=notification_configuration
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  NotificationConfiguration:
    Type: 'Custom::S3BucketNotification'
    Properties:
      ServiceToken: !GetAtt NotificationConfigurationFunction.Arn
      BucketName: !Ref RawDataBucket
      FunctionArn: !GetAtt CopyObjectFunction.Arn
    DependsOn: 
      - S3BucketPermission
      - RawDataBucket
      - CopyObjectFunction

Outputs:
  RawDataBucketName:
    Description: 'Name of the raw data S3 bucket'
    Value: !Ref RawDataBucket
  ImbaStanleyBucketName:
    Description: 'Name of the imba-stanley S3 bucket'
    Value: !Ref ImbaStanleyBucket
  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref CopyObjectFunction