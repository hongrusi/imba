AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for S3 buckets and Lambda function'

Parameters:
  RawDataBucketName:
    Type: String
    Description: Name for the raw data S3 bucket
    Default: imba-rawdata

  ImbaStanleyBucketName:
    Type: String
    Description: Name for the imba-stanley S3 bucket
    Default: imba-stanley

Resources:
  RawDataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref RawDataBucketName

  ImbaStanleyBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ImbaStanleyBucketName

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${RawDataBucket}/*'
                  - !Sub 'arn:aws:s3:::${ImbaStanleyBucket}/*'

  CopyObjectFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CopyObjectFunction'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import os

          s3 = boto3.client('s3')

          def handler(event, context):
              for record in event['Records']:
                  source_bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  target_bucket = os.environ['TARGET_BUCKET']
                  
                  copy_source = {'Bucket': source_bucket, 'Key': key}
                  s3.copy_object(Bucket=target_bucket, Key=key, CopySource=copy_source)
                  
              return {'statusCode': 200, 'body': 'Object copied successfully!'}
      Environment:
        Variables:
          TARGET_BUCKET: !Ref ImbaStanleyBucketName

  S3BucketPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref CopyObjectFunction
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceArn: !GetAtt RawDataBucket.Arn

  S3BucketNotification: 
    Type: Custom::S3BucketNotification 
    Properties:
      ServiceToken: !GetAtt NotificationConfigurationFunction.Arn
      BucketName: !Ref RawDataBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Event: 's3:ObjectCreated:*'
            LambdaFunctionArn: !GetAtt CopyObjectFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'data/'

  NotificationConfigurationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt NotificationConfigurationRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      s3 = boto3.client('s3')
                      bucket = event['ResourceProperties']['BucketName']
                      notification = event['ResourceProperties']['NotificationConfiguration']
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket,
                          NotificationConfiguration=notification
                      )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  NotificationConfigurationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutBucketNotification'
                Resource: !GetAtt RawDataBucket.Arn

Outputs:
  RawDataBucketName:
    Description: 'Name of the raw data S3 bucket'
    Value: !Ref RawDataBucket
  ImbaStanleyBucketName:
    Description: 'Name of the imba-stanley S3 bucket'
    Value: !Ref ImbaStanleyBucket
  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref CopyObjectFunction