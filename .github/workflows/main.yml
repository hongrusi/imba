name: Deploy AWS Resources

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  
#  workflow_dispatch: # Trigger manually on workflow

jobs:
  deploy_resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      
      - name: Deploy S3 Buckets CloudFormation Stack
        id: deploy-s3
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: imba-buckets
          template: cfn/s3.yml
          capabilities: CAPABILITY_IAM
          no-fail-on-empty-changeset: "1"

      - name: Set S3 Bucket Outputs
        run: |
          RAW_DATA_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name imba-buckets --query "Stacks[0].Outputs[?OutputKey=='RawDataBucketName'].OutputValue" --output text)
          IMBA_STANLEY_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name imba-buckets --query "Stacks[0].Outputs[?OutputKey=='ImbaStanleyBucketName'].OutputValue" --output text)
          SCRIPTS_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name imba-buckets --query "Stacks[0].Outputs[?OutputKey=='ScriptsBucketName'].OutputValue" --output text)
          echo "RAW_DATA_BUCKET_NAME=$RAW_DATA_BUCKET_NAME" >> $GITHUB_ENV
          echo "IMBA_STANLEY_BUCKET_NAME=$IMBA_STANLEY_BUCKET_NAME" >> $GITHUB_ENV
          echo "SCRIPTS_BUCKET_NAME=$SCRIPTS_BUCKET_NAME" >> $GITHUB_ENV

      - name: Zip function
        run: |
          zip -j lambda.zip ./script/lambda.py
  
      - name: Upload Lambda function and ETL into S3 bucket
        run: |
          aws s3 cp lambda.zip s3://$SCRIPTS_BUCKET_NAME/lambda.zip
          aws s3 cp script/etl_script.py s3://$SCRIPTS_BUCKET_NAME/etl_script.py
        if: steps.deploy-s3.outcome == 'success'
  
      
      - name: Deploy Lambda Function CloudFormation Stack
        id: lambda-function
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: imba-LambdaFunction
          template: cfn/lambda.yml
          capabilities: CAPABILITY_IAM
          no-fail-on-empty-changeset: "1"

      - name: Fetch Lambda Function ARN
        run: |
          LAMBDA_FUNCTION_ARN=$(aws cloudformation describe-stacks --stack-name imba-LambdaFunction --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionArn'].OutputValue" --output text)
          echo "LAMBDA_FUNCTION_ARN=$LAMBDA_FUNCTION_ARN" >> $GITHUB_ENV

      - name: Set S3 Bucket Notification
        run: |
          aws s3api put-bucket-notification-configuration \
            --bucket ${{ env.RAW_DATA_BUCKET_NAME }} \
            --notification-configuration '{
              "LambdaFunctionConfigurations": [
                {
                  "LambdaFunctionArn": "${{ env.LAMBDA_FUNCTION_ARN }}",
                  "Events": ["s3:ObjectCreated:*"]
                }
              ]
            }'


      - name: Deploy Glue Job CloudFormation Stack
        id: glue-job
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: imba-GlueJob
          template: cfn/glue.yml
          parameter-overrides: >-
            ScriptsBucketName=${{ env.SCRIPTS_BUCKET_NAME }},
            ImbaStanleyBucketName=${{ env.IMBA_STANLEY_BUCKET_NAME }}
          no-fail-on-empty-changeset: "1"

      - name: Fetch Glue Job Name
        if: steps.glue-stack-check.outputs.glue_stack_exists == 'true'
        run: |
          GLUE_JOB_NAME=$(aws cloudformation describe-stacks --stack-name imba-GlueJob --query "Stacks[0].Outputs[?OutputKey=='GlueJobName'].OutputValue" --output text)
          echo "GLUE_JOB_NAME=$GLUE_JOB_NAME" >> $GITHUB_ENV