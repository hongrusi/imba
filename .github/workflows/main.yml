name: Deploy AWS Resources

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  
#  workflow_dispatch: # Trigger manually on workflow


jobs:
  deploy_resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Conditional deployment based on changes in main.yml
      # CloudFormation deployment step will execute only if the relevant files have changed
      # By using glue/**/*.py, it means "include any Python script located in the glue directory or any of its subdirectories
      - name: Detect Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          list-files: shell
          filters: |
            s3:
             - 'cfn/s3.yml'
            lambda:
              - 'cfn/lambda.yml'
            glue:
              - 'cfn/glue.yml'
              - 'glue/**/*.py'
      
      
      - name: Deploy S3 Buckets CloudFormation Stack
        id: s3-buckets
        if: steps.changes.outputs.s3 ==' true'
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: imba-RawDataBucket
          template: cfn/s3.yml
          capabilities: CAPABILITY_IAM

      - name: Set S3 Bucket Outputs
        if: steps.changes.outputs.s3 == 'true'
        run: |
          RAW_DATA_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name imba-RawDataBucket --query "Stacks[0].Outputs[?OutputKey=='RawDataBucketName'].OutputValue" --output text)
          IMBA_STANLEY_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name imba-RawDataBucket --query "Stacks[0].Outputs[?OutputKey=='ImbaStanleyBucketName'].OutputValue" --output text)
          GLUE_SCRIPTS_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name imba-RawDataBucket --query "Stacks[0].Outputs[?OutputKey=='GlueScriptsBucketName'].OutputValue" --output text)
          echo "RAW_DATA_BUCKET_NAME=$RAW_DATA_BUCKET_NAME" >> $GITHUB_ENV
          echo "IMBA_STANLEY_BUCKET_NAME=$IMBA_STANLEY_BUCKET_NAME" >> $GITHUB_ENV
          echo "GLUE_SCRIPTS_BUCKET_NAME=$GLUE_SCRIPTS_BUCKET_NAME" >> $GITHUB_ENV

      - name: Deploy Lambda Function CloudFormation Stack
        id: lambda-function
        if: steps.changes.outputs.lambda == 'true'
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: imba-LambdaFunction
          template: cfn/lambda.yml
          capabilities: CAPABILITY_IAM

      - name: Fetch Lambda Function ARN
        if: steps.changes.outputs.lambda == 'true'
        run: |
          LAMBDA_FUNCTION_ARN=$(aws cloudformation describe-stacks --stack-name imba-LambdaFunction --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionArn'].OutputValue" --output text)
          echo "LAMBDA_FUNCTION_ARN=$LAMBDA_FUNCTION_ARN" >> $GITHUB_ENV

      # refer to AWS CLI Command Reference https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/put-bucket-notification-configuration.html
      - name: Set S3 Bucket Notification
        if: steps.changes.outputs.lambda == 'true'
        run: |
          aws s3api put-bucket-notification-configuration \
            --bucket ${{ env.RAW_DATA_BUCKET_NAME }} \
            --notification-configuration '{
              "LambdaFunctionConfigurations": [
                {
                  "LambdaFunctionArn": "${{ env.LAMBDA_FUNCTION_ARN }}",
                  "Events": ["s3:ObjectCreated:*"]
                }
              ]
            }'

      - name: Debug Outputs
        run: |
          echo "Bucket Name: ${{ env.RAW_DATA_BUCKET_NAME }}"
          echo "Lambda ARN: ${{ env.LAMBDA_FUNCTION_ARN }}"
    

      - name: Upload Glue Job Script
        if: steps.changes.outputs.glue == 'true'
        run: |
          aws s3 cp glue/etl_script.py s3://${{ env.GLUE_SCRIPTS_BUCKET_NAME }}/etl_script.py

      - name: Deploy Glue Job CloudFormation Stack
        id: glue-job
        if: steps.changes.outputs.glue == 'true'
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: imba-GlueJob
          template: cfn/glue.yml
          parameter-overrides: |
            GlueScriptsBucketName=${{ env.GLUE_SCRIPTS_BUCKET_NAME }}
            ImbaStanleyBucketName=${{ env.IMBA_STANLEY_BUCKET_NAME }}

      - name: Fetch Glue Job Name
        if: steps.changes.outputs.glue == 'true'
        run: |
          GLUE_JOB_NAME=$(aws cloudformation describe-stacks --stack-name imba-GlueJob --query "Stacks[0].Outputs[?OutputKey=='GlueJobName'].OutputValue" --output text)
          echo "GLUE_JOB_NAME=$GLUE_JOB_NAME" >> $GITHUB_ENV